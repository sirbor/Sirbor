{"about":{"slug":"about","filePath":"about.md","title":"About Me","links":[],"tags":[],"content":"About Me üë®‚Äçüíª\nWho I Am\nI‚Äôm a software engineer passionate about building elegant solutions to complex problems. When I‚Äôm not coding, you‚Äôll find me exploring new technologies, contributing to open-source projects, or enjoying a good cup of coffee.\nSkills &amp; Expertise\n\nLanguages: TypeScript, Python, Go, C\nFrontend: React, Next.js, TailwindCSS\nBackend: Node.js, FastAPI, PostgreSQL\nDevOps: Docker, Kubernetes, AWS\n\nFun Facts\n\nI can type at 120 WPM\nI‚Äôve contributed to over 50 open-source projects\nI maintain a collection of mechanical keyboards\nI‚Äôm a certified coffee snob ‚òï\n\nConnect\n\nGitHub\nLinkedIn\nTwitter\n"},"blog/learning-c-basics":{"slug":"blog/learning-c-basics","filePath":"blog/learning-c-basics.md","title":"Learning C: The Basics","links":["blog/learning-c-pointers","blog/learning-c-memory"],"tags":["C","programming","basics"],"content":"Learning C: The Basics\n\n‚ÄúC is quirky, flawed, and an enormous success.‚Äù ‚Äî Dennis M. Ritchie\n\nWhy Learn C?\nC is the foundation of modern programming. Understanding C gives you insight into how computers work at a low level.\nHello, World!\n#include &lt;stdio.h&gt;\n \nint main() {\n    printf(&quot;Hello, World!\\n&quot;);\n    return 0;\n}\nKey Concepts\n\nVariables and Data Types\nControl Structures (if, for, while)\nFunctions\n\nNext Steps\n\nPointers Demystified\nMemory Management\n"},"blog/learning-c-memory":{"slug":"blog/learning-c-memory","filePath":"blog/learning-c-memory.md","title":"Learning C: Memory Management","links":[],"tags":["C","memory","malloc","free"],"content":"Learning C: Memory Management\n\n‚ÄúWith great power comes great responsibility.‚Äù ‚Äî Uncle Ben (and every C programmer)\n\nDynamic Memory Allocation\n#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n \nint main() {\n    int *arr = malloc(5 * sizeof(int));\n    if (arr == NULL) {\n        // Always check for allocation failure!\n        return 1;\n    }\n    for (int i = 0; i &lt; 5; i++) arr[i] = i * i;\n    for (int i = 0; i &lt; 5; i++) printf(&quot;%d &quot;, arr[i]);\n    free(arr);\n    return 0;\n}\nKey Points\n\nUse malloc, calloc, realloc for dynamic memory\nAlways free what you allocate\nAvoid memory leaks and dangling pointers\n\nFurther Reading\n\nC Programming: Dynamic Memory\n"},"blog/learning-c-pointers":{"slug":"blog/learning-c-pointers","filePath":"blog/learning-c-pointers.md","title":"Learning C: Pointers Demystified","links":[],"tags":["C","pointers","memory"],"content":"Learning C: Pointers Demystified\n\n‚ÄúTo understand pointers is to understand C.‚Äù ‚Äî Yashavant Kanetkar\n\nWhat is a Pointer?\nA pointer is a variable that stores the memory address of another variable.\nExample\n#include &lt;stdio.h&gt;\n \nint main() {\n    int x = 42;\n    int *p = &amp;x;\n    printf(&quot;x = %d, *p = %d\\n&quot;, x, *p);\n    return 0;\n}\nWhy Use Pointers?\n\nDynamic memory allocation\nEfficient array and string handling\nBuilding data structures (linked lists, trees)\n\nTips\n\nAlways initialize pointers\nBe careful with pointer arithmetic\n"},"index":{"slug":"index","filePath":"index.md","title":"Welcome to My Digital Garden","links":["blog/learning-c-basics","blog/learning-c-pointers","blog/learning-c-memory","blog/tutorials","blog/system-design","blog/coding-practices","projects/project-1","projects/project-2","projects/project-3","projects/project-4","projects/project-5","resources/setup-nvim","resources/setup-git","resources/setup-shell","weekly-readings/2024-06-01","weekly-readings/2024-06-08","weekly-readings/2024-06-15","weekly-readings/2024-06-22","about","projects","resources"],"tags":[],"content":"Welcome to My Digital Garden üå±\nLatest Adventures\n\nLearning C: The Basics\nLearning C: Pointers Demystified\nLearning C: Memory Management\n\nFeatured Categories\n\nTutorials - Deep dives into programming concepts\nSystem Design - Architecture and design patterns\nCoding Practices - Best practices and tips\n\nProjects\n\nProject One: Lorem Ipsum\nProject Two: Dolor Sit\nProject Three: Consectetur\nProject Four: Adipiscing\nProject Five: Elit\n\nResources\n\nSetting Up Neovim for Development\nGetting Started with Git\nCustomizing Your Shell\n\nWeekly Readings\n\nWeekly Readings: June 1, 2024\nWeekly Readings: June 8, 2024\nWeekly Readings: June 15, 2024\nWeekly Readings: June 22, 2024\n\nQuick Links\n\nAbout Me - Learn more about my journey\nProjects - Explore my work\nResources - Useful tools and references\n\nTech Stack\n\nLanguages: TypeScript, Python, Go, C\nFrontend: React, Next.js, TailwindCSS\nBackend: Node.js, FastAPI, PostgreSQL\nTools: Docker, Kubernetes, AWS\n\nConnect\n\nGitHub\nLinkedIn\nTwitter\n"},"projects/project-1":{"slug":"projects/project-1","filePath":"projects/project-1.md","title":"Project One: Lorem Ipsum","links":[],"tags":["project","placeholder"],"content":"Project One: Lorem Ipsum\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque euismod, urna eu tincidunt consectetur, nisi nisl aliquam nunc, eget aliquam massa nisl quis neque.\nFeatures\n\nFeature 1\nFeature 2\nFeature 3\n\nTech Stack\n\nTechnology A\nTechnology B\n"},"projects/project-2":{"slug":"projects/project-2","filePath":"projects/project-2.md","title":"Project Two: Dolor Sit","links":[],"tags":["project","placeholder"],"content":"Project Two: Dolor Sit\nSed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco.\nFeatures\n\nFeature A\nFeature B\nFeature C\n\nTech Stack\n\nTechnology X\nTechnology Y\n"},"projects/project-3":{"slug":"projects/project-3","filePath":"projects/project-3.md","title":"Project Three: Consectetur","links":[],"tags":["project","placeholder"],"content":"Project Three: Consectetur\nDuis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur.\nFeatures\n\nFeature Alpha\nFeature Beta\n\nTech Stack\n\nTechnology 1\nTechnology 2\n"},"projects/project-4":{"slug":"projects/project-4","filePath":"projects/project-4.md","title":"Project Four: Adipiscing","links":[],"tags":["project","placeholder"],"content":"Project Four: Adipiscing\nExcepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\nFeatures\n\nFeature Uno\nFeature Dos\n\nTech Stack\n\nTechnology Foo\nTechnology Bar\n"},"projects/project-5":{"slug":"projects/project-5","filePath":"projects/project-5.md","title":"Project Five: Elit","links":[],"tags":["project","placeholder"],"content":"Project Five: Elit\nCurabitur pretium tincidunt lacus. Nulla gravida orci a odio. Nullam varius, turpis et commodo pharetra.\nFeatures\n\nFeature Red\nFeature Blue\n\nTech Stack\n\nTechnology Baz\nTechnology Qux\n"},"resources/setup-git":{"slug":"resources/setup-git","filePath":"resources/setup-git.md","title":"Getting Started with Git","links":[],"tags":["git","version-control","setup"],"content":"Getting Started with Git\nGit is the most popular version control system. Here‚Äôs how to get started:\nInstallation\nbrew install git\nBasic Configuration\ngit config --global user.name &quot;Your Name&quot;\ngit config --global user.email &quot;you@example.com&quot;\nCommon Commands\n\ngit init ‚Äî Initialize a new repository\ngit clone &lt;url&gt; ‚Äî Clone a repository\ngit add . ‚Äî Stage changes\ngit commit -m &quot;message&quot; ‚Äî Commit changes\ngit push ‚Äî Push to remote\n\nFurther Reading\n\nPro Git Book\nGitHub Docs\n"},"resources/setup-nvim":{"slug":"resources/setup-nvim","filePath":"resources/setup-nvim.md","title":"Setting Up Neovim for Development","links":[],"tags":["neovim","editor","setup"],"content":"Setting Up Neovim for Development\nNeovim is a powerful, extensible text editor. Here‚Äôs a basic setup:\nInstallation\nbrew install neovim\nBasic Configuration\nCreate or edit ~/.config/nvim/init.vim:\nset number\nsyntax on\nset tabstop=4\nset shiftwidth=4\nset expandtab\nPlugins\nUse vim-plug:\ncall plug#begin(&#039;~/.vim/plugged&#039;)\nPlug &#039;preservim/nerdtree&#039;\nPlug &#039;junegunn/fzf&#039;\nPlug &#039;neoclide/coc.nvim&#039;, {&#039;branch&#039;: &#039;release&#039;}\ncall plug#end()\nFurther Reading\n\nNeovim Docs\nAwesome Neovim\n"},"resources/setup-shell":{"slug":"resources/setup-shell","filePath":"resources/setup-shell.md","title":"Customizing Your Shell","links":[],"tags":["shell","terminal","setup"],"content":"Customizing Your Shell\nA productive shell can boost your workflow.\nPopular Shells\n\nBash\nZsh\nFish\n\nCustomization Tips\n\nUse a theme (e.g., Oh My Zsh)\nAdd useful plugins (autosuggestions, syntax highlighting)\nCustomize your prompt\n\nExample: Oh My Zsh\nsh -c &quot;$(curl -fsSL raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)&quot;\nFurther Reading\n\nOh My Zsh\nAwesome Zsh Plugins\n"},"weekly-readings/2024-06-01":{"slug":"weekly-readings/2024-06-01","filePath":"weekly-readings/2024-06-01.md","title":"Weekly Readings: June 1, 2024","links":[],"tags":["weekly","reading","blogs","books","newsletters"],"content":"üìö Weekly Readings: June 1, 2024\nüìù Blogs\n\nThe Pragmatic Engineer: ‚ÄúHow Big Tech Runs Tech Projects and the Curious Absence of Scrum‚Äù\n\nInsightful look at how large companies manage engineering projects.\n\n\n\nüì∞ Newspapers\n\nThe New York Times: ‚ÄúAI‚Äôs New Frontier: The Real World‚Äù\n\nA feature on how AI is moving from labs to real-world applications.\n\n\n\nüìñ Books\n\n‚ÄúClean Code‚Äù by Robert C. Martin\n\nRe-reading the classic on writing maintainable, readable code.\n\n\n\nüì® Newsletters\n\nTLDR Newsletter\n\nMy daily dose of tech news, summaries, and interesting links.\n\n\n"},"weekly-readings/2024-06-08":{"slug":"weekly-readings/2024-06-08","filePath":"weekly-readings/2024-06-08.md","title":"Weekly Readings: June 8, 2024","links":[],"tags":["weekly","reading","blogs","books","newsletters"],"content":"üìö Weekly Readings: June 8, 2024\nüìù Blogs\n\nOverreacted: ‚ÄúGoodbye, Clean Code‚Äù by Dan Abramov\n\nA thought-provoking take on code quality and pragmatism.\n\n\n\nüì∞ Newspapers\n\nThe Guardian: ‚ÄúThe Rise of Remote Work‚Äù\n\nHow remote work is reshaping the global workforce.\n\n\n\nüìñ Books\n\n‚ÄúThe Phoenix Project‚Äù by Gene Kim, Kevin Behr, and George Spafford\n\nA novel about IT, DevOps, and helping your business win.\n\n\n\nüì® Newsletters\n\nMorning Brew: Tech\n\nA fun, concise roundup of the week‚Äôs tech news.\n\n\n"},"weekly-readings/2024-06-15":{"slug":"weekly-readings/2024-06-15","filePath":"weekly-readings/2024-06-15.md","title":"Weekly Readings: June 15, 2024","links":[],"tags":["weekly","reading","blogs","books","newsletters"],"content":"üìö Weekly Readings: June 15, 2024\nüìù Blogs\n\nJoel on Software: ‚ÄúThings You Should Never Do, Part I‚Äù\n\nClassic advice on software rewrites and technical debt.\n\n\n\nüì∞ Newspapers\n\nFinancial Times: ‚ÄúThe Future of Open Source‚Äù\n\nAn analysis of open source‚Äôs impact on business and innovation.\n\n\n\nüìñ Books\n\n‚ÄúAtomic Habits‚Äù by James Clear\n\nPractical strategies for building good habits and breaking bad ones.\n\n\n\nüì® Newsletters\n\nHacker Newsletter\n\nA curated list of the best articles from Hacker News.\n\n\n"},"weekly-readings/2024-06-22":{"slug":"weekly-readings/2024-06-22","filePath":"weekly-readings/2024-06-22.md","title":"Weekly Readings: June 22, 2024","links":[],"tags":["weekly","reading","blogs","books","newsletters"],"content":"üìö Weekly Readings: June 22, 2024\nüìù Blogs\n\nCSS-Tricks: ‚ÄúA Complete Guide to Flexbox‚Äù\n\nThe definitive guide to mastering CSS Flexbox layouts.\n\n\n\nüì∞ Newspapers\n\nThe Wall Street Journal: ‚ÄúThe Next Big Thing in Cloud Computing‚Äù\n\nWhat‚Äôs coming next for cloud infrastructure and services.\n\n\n\nüìñ Books\n\n‚ÄúDeep Work‚Äù by Cal Newport\n\nExploring strategies for focused, meaningful work in a distracted world.\n\n\n\nüì® Newsletters\n\nSoftware Lead Weekly\n\nLeadership and engineering management insights delivered every week.\n\n\n"}}